package com.example.tests;

import io.qameta.allure.Step;
import io.restassured.http.ContentType;
import io.restassured.path.json.JsonPath;
import io.restassured.response.Response;
import org.testng.annotations.Test;
import utils.TestUtil;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;

import static org.hamcrest.MatcherAssert.assertThat;

import static io.restassured.RestAssured.*;
import static org.hamcrest.Matchers.*;


public class ReqresTest extends ApiTests {

    @Test
    public void TC01_getAllUsers() {
        int page = 1;
        int totalPages;
        List<String> allUserNames = new ArrayList<>();
        long totalResponseTime = 0; // Toplam yanıt süresi

        do {
            long startTime = System.currentTimeMillis(); // Başlangıç zamanı (her istekte)

            Response response = given()
                    .header("x-api-key", Config.getApiKey())
                    .accept("application/json")
                    .when()
                    .get("/api/users?page=" + page);

            // Yanıt süresi
            long responseTime = System.currentTimeMillis() - startTime;
            totalResponseTime += responseTime;

            // Yanıtı yazdırıyoruz
            response.prettyPrint();

            JsonPath jsonPath = response.jsonPath();
            List<String> userNames = jsonPath.getList("data.first_name");
            allUserNames.addAll(userNames);

            totalPages = jsonPath.getInt("total_pages");
            page++;

        } while (page <= totalPages);

        // Tüm kullanıcı adları yazdırılıyor
        System.out.println("Tüm kullanıcı adları: " + allUserNames);

        // Test: "George" kullanıcısının olup olmadığını kontrol ediyoruz
        assertThat(allUserNames, hasItem("George"));

        // Ortalama yanıt süresi kontrolü
        assertThat("Toplam yanıt süresi 2000ms'den uzun olmamalı!", totalResponseTime, lessThan(2000L));
        TestUtil.checkPerformance(totalResponseTime, 2000);
    }

    @Test
    public void TC02_getUsersPage1() {
        Response response = given()
                .accept("application/json")
                .when()
                .get("/api/users?page=1");

        response.prettyPrint();
        assertThat(response.asString(), containsString("George"));

        long responseTime = response.timeIn(TimeUnit.MILLISECONDS);

        // Ortak performans kontrolü
        TestUtil.checkPerformance(responseTime, 2000);
    }

    @Test
    public void TC03_getUserById() {
        Response response = given()
                .header("x-api-key", Config.getApiKey())
                .accept("application/json")
                .when()
                .get("/api/users/2");

        System.out.println("Status Code: " + response.getStatusCode());
        System.out.println("Response Body: " + response.getBody().asPrettyString());

        assertThat(response.getStatusCode(), equalTo(200));
        assertThat(response.getBody().asString(), containsString("janet.weaver"));

        long responseTime = response.timeIn(TimeUnit.MILLISECONDS);

        // Ortak performans kontrolü
        TestUtil.checkPerformance(responseTime, 2000);
    }

    @Test
    public void TC04_register() {
        String requestBody = "{\n" +
                "  \"email\": \"eve.holt@reqres.in\",\n" +
                "  \"password\": \"pistol\"\n" +
                "}";

        Response response = given()
                .contentType(ContentType.JSON)
                .header("x-api-key", Config.getApiKey())
                .body(requestBody)
                .post("/api/register");

        System.out.println("Status Code: " + response.getStatusCode());
        System.out.println("Response Body: " + response.getBody().asString());

        assertThat(response.getStatusCode(), equalTo(200));
        assertThat(response.getBody().asString(), containsString("token"));

        long responseTime = response.timeIn(TimeUnit.MILLISECONDS);

        // Ortak performans kontrolü
        TestUtil.checkPerformance(responseTime, 2000);
    }

    @Test
    public void TC05_successfulLogin() {
        String requestBody = "{\n" +
                "  \"email\": \"eve.holt@reqres.in\",\n" +
                "  \"password\": \"cityslicka\"\n" +
                "}";

        Response response = given()
                .contentType(ContentType.JSON)
                .header("x-api-key", Config.getApiKey()) // API anahtarını ekliyoruz
                .body(requestBody)
                .post("/api/login");

        // Yanıt bilgilerini yazdır
        System.out.println("Status Code: " + response.getStatusCode());
        System.out.println("Response Body: " + response.getBody().asString());

        // AssertThat ile kontrol sağlıyoruz
        assertThat(response.getStatusCode(), equalTo(200));
        assertThat(response.getBody().asString(), containsString("token"));

        long responseTime = response.timeIn(TimeUnit.MILLISECONDS);

        // Ortak performans kontrolü
        TestUtil.checkPerformance(responseTime, 2000);
    }

    @Test
    public void TC06_loginWithNoBody() {
        Response response = given()
                .contentType(ContentType.JSON)
                .header("x-api-key", Config.getApiKey())
                .post("/api/login"); // body() çağrısı yok, yani gerçekten boş gövde

        System.out.println("Status Code: " + response.getStatusCode());
        System.out.println("Response Body: " + response.getBody().asString());

        assertThat(response.getStatusCode(), equalTo(400));
        assertThat(response.getBody().asString(), containsString("Missing email or username"));

        long responseTime = response.timeIn(TimeUnit.MILLISECONDS);

        // Ortak performans kontrolü
        TestUtil.checkPerformance(responseTime, 2000);
    }

    @Test()
    public void TC07_registerWithoutEmailOrPassword() {
        String requestBody = "{\n" +
                "  \"email\": \"eve.holt@reqres.in\"\n" +
                "}";

        Response response = given()
                .contentType(ContentType.JSON)
                .header("x-api-key", Config.getApiKey())
                .accept("application/json")
                .body(requestBody)
                .when()
                .post("/api/register");

        // Yanıt bilgilerini yazdır
        System.out.println("Status Code: " + response.getStatusCode());
        System.out.println("Response Body: " + response.getBody().asPrettyString());

        // AssertThat ile kontrol sağlıyoruz
        assertThat(response.getStatusCode(), equalTo(400)); // 400 Bad Request
        assertThat(response.getBody().asString(), containsString("Missing password"));

        long responseTime = response.timeIn(TimeUnit.MILLISECONDS);

        // Ortak performans kontrolü
        TestUtil.checkPerformance(responseTime, 2000);
    }

    @Test
    public void TC08_loginWithInvalidEmail() {
        String requestBody = "{\n" +
                "  \"email\": \"invalid.email@reqres.in\",\n" +
                "  \"password\": \"cityslicka\"\n" +
                "}";

        Response response = given()
                .contentType(ContentType.JSON)
                .header("x-api-key", Config.getApiKey())
                .body(requestBody)
                .post("/api/login");

        System.out.println("Status Code: " + response.getStatusCode());
        System.out.println("Response Body: " + response.getBody().asString());

        // AssertThat ile kontrol sağlıyoruz
        assertThat(response.getStatusCode(), equalTo(400)); // API 400 döndürebilir
        assertThat(response.getBody().asString(), containsString("user not found"));

        long responseTime = response.timeIn(TimeUnit.MILLISECONDS);

        // Ortak performans kontrolü
        TestUtil.checkPerformance(responseTime, 2000);
    }

    @Test
    public void TC09_loginWithInvalidPassword() {
        String requestBody = "{\n" +
                "  \"email\": \"eve.holt@reqres.in\",\n" +
                "  \"password\": \"wrongpassword\"\n" +
                "}";

        Response response = given()
                .contentType(ContentType.JSON)
                .header("x-api-key", Config.getApiKey())
                .body(requestBody)
                .post("/api/login");

        System.out.println("Status Code: " + response.getStatusCode());
        System.out.println("Response Body: " + response.getBody().asString());

        long responseTime = response.timeIn(TimeUnit.MILLISECONDS);

        // Ortak performans kontrolü
        TestUtil.checkPerformance(responseTime, 2000);

        // AssertThat ile kontrol sağlıyoruz
        assertThat(response.getStatusCode(), equalTo(401)); // 401 Unauthorized
        assertThat(response.getBody().asString(), containsString("Invalid credentials"));
    }

    @Test
    public void TC10_createUser() {
        String requestBody = "{\n" +
                "  \"name\": \"John\",\n" +
                "  \"job\": \"Developer\"\n" +
                "}";

        Response response = given()
                .contentType(ContentType.JSON)
                .header("x-api-key", Config.getApiKey())
                .accept("application/json")
                .body(requestBody)
                .when()
                .post("/api/users");

        // Yanıt bilgilerini yazdır
        System.out.println("Status Code: " + response.getStatusCode());
        System.out.println("Response Body: " + response.getBody().asPrettyString());

        // AssertThat ile kontrol sağlıyoruz
        assertThat(response.getStatusCode(), equalTo(201)); // 201 Created
        assertThat(response.getBody().asString(), containsString("John"));
        assertThat(response.getBody().asString(), containsString("Developer"));

        long responseTime = response.timeIn(TimeUnit.MILLISECONDS);

        // Ortak performans kontrolü
        TestUtil.checkPerformance(responseTime, 2000);
    }

    @Test
    public void TC11_updateUser() {
        String requestBody = "{\n" +
                "  \"name\": \"Jane\",\n" +
                "  \"job\": \"Manager\"\n" +
                "}";

        Response response = given()
                .contentType(ContentType.JSON)
                .header("x-api-key", Config.getApiKey())
                .body(requestBody)
                .when()
                .put("/api/users/2");

        // Yanıt bilgilerini yazdır
        System.out.println("Status Code: " + response.getStatusCode());
        System.out.println("Response Body: " + response.getBody().asPrettyString());

        // AssertThat ile kontrol sağlıyoruz
        assertThat(response.getStatusCode(), equalTo(200));
        assertThat(response.getBody().asString(), containsString("Jane"));
        assertThat(response.getBody().asString(), containsString("Manager"));

        long responseTime = response.timeIn(TimeUnit.MILLISECONDS);

        // Ortak performans kontrolü
        TestUtil.checkPerformance(responseTime, 2000);
    }

    @Test
    public void TC12_deleteUser() {
        Response response = given()
                .header("x-api-key", Config.getApiKey())
                .when()
                .delete("/api/users/2");

        // Yanıt bilgilerini yazdır
        System.out.println("Status Code: " + response.getStatusCode());

        // AssertThat ile kontrol sağlıyoruz
        assertThat(response.getStatusCode(), equalTo(204)); // 204 No Content bekliyoruz

        long responseTime = response.timeIn(TimeUnit.MILLISECONDS);

        // Ortak performans kontrolü
        TestUtil.checkPerformance(responseTime, 2000);
    }

    @Test
    public void TC13_delayedResponse() {
        Response response = given()
                .header("x-api-key", Config.getApiKey())
                .accept("application/json")
                .when()
                .get("/api/users?delay=3");

        // Yanıt bilgilerini yazdır
        System.out.println("Status Code: " + response.getStatusCode());
        System.out.println("Response Body: " + response.getBody().asPrettyString());

        // AssertThat ile kontrol sağlıyoruz
        assertThat(response.getStatusCode(), equalTo(200)); // 200 OK

        long responseTime = response.timeIn(TimeUnit.MILLISECONDS);

        // Ortak performans kontrolü
        TestUtil.checkPerformance(responseTime, 2000);
    }

    @Step("Kullanıcı verisi alındı ve yanıt süresi ölçüldü")
    public void logTestDetails() {
        // Bu adım Allure raporunda görünecektir.
    }
}
